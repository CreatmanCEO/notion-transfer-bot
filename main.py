import sys
import os
from pathlib import Path
from typing import Optional, Dict
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, ConversationHandler, CallbackQueryHandler, filters
from aiohttp import web
import asyncio

from config.settings import BASE_DIR
from notion.api import NotionAPI
from notion.models import NotionPage, TransferProgress
from utils.logger import setup_logger
from utils.helpers import save_progress, load_progress

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = setup_logger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(LANGUAGE_SELECT, MAIN_MENU, TRANSFER_START, ORIGIN_TOKEN, DEST_TOKEN, 
 ORIGIN_DB, DEST_DB, CONFIRMATION, FAQ, HELP) = range(10)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data: Dict[int, dict] = {}

# –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    'ru': {
        'welcome': (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –±–∞–∑–∞–º–∏ Notion.\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
            "üìã –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –æ–¥–Ω–æ–π –±–∞–∑—ã –≤ –¥—Ä—É–≥—É—é\n"
            "üîÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö\n"
            "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:"
        ),
        'main_menu': "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        'select_action': "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        'start_transfer': "üöÄ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å",
        'how_to_get_tokens': "üîë –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã",
        'how_to_get_db_ids': "üìù –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID –±–∞–∑—ã",
        'faq': "‚ùì FAQ",
        'about': "‚ÑπÔ∏è –û –±–æ—Ç–µ",
        'help': "üÜò –ü–æ–º–æ—â—å",
        'cancel': "‚ùå –û—Ç–º–µ–Ω–∞",
        'back': "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        'origin_token_prompt': (
            "üîë –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Notion\n\n"
            "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:\n"
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://www.notion.so/my-integrations\n"
            "2. –ù–∞–∂–º–∏—Ç–µ 'New integration'\n"
            "3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω"
        ),
        'dest_token_prompt': "üîë –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Ü–µ–ª–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Notion",
        'origin_db_prompt': (
            "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n\n"
            "ID –±–∞–∑—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –µ—ë URL:\n"
            "notion.so/workspace/[ID-–ë–ê–ó–´]?v=..."
        ),
        'dest_db_prompt': "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Ü–µ–ª–µ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        'faq_text': (
            "*–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n"
            "*–í: –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Notion?*\n"
            "–û: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ [Notion Integrations](https://www.notion.so/my-integrations), "
            "—Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω.\n\n"
            "*–í: –ì–¥–µ –Ω–∞–π—Ç–∏ ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö?*\n"
            "–û: –û—Ç–∫—Ä–æ–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏–∑ URL:\n"
            "`notion.so/workspace/{ID-–ë–ê–ó–´}?v=...`\n\n"
            "*–í: –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è?*\n"
            "–û: –í—Å–µ –∑–∞–ø–∏—Å–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Å–≤–æ–π—Å—Ç–≤.\n\n"
            "*–í: –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å?*\n"
            "–û: –î–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç."
        ),
        'about_text': (
            "*–û –±–æ—Ç–µ:*\n\n"
            "Notion Transfer Bot –ø–æ–º–æ–≥–∞–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –±–∞–∑–∞–º–∏ Notion. "
            "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API Notion –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:\n\n"
            "‚úÖ –ü–µ—Ä–µ–Ω–æ—Å –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π\n"
            "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã\n"
            "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
            "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫\n\n"
            "–í–µ—Ä—Å–∏—è: 1.0.0\n"
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @your_username"
        ),
        'help_text': (
            "*–ü–æ–º–æ—â—å:*\n\n"
            "üîπ */start* - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "üîπ */cancel* - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
            "üîπ */help* - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º:\n"
            "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤\n"
            "2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –±–∞–∑ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ\n"
            "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π\n\n"
            "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ @your_username"
        )
    },
    'en': {
        'welcome': (
            "üëã Hi! I'm a bot for transferring data between Notion databases.\n\n"
            "I'll help you:\n"
            "üìã Transfer all records from one database to another\n"
            "üîÑ Preserve data structure and properties\n"
            "üìä Track progress in real-time\n\n"
            "Choose interface language:"
        ),
        'main_menu': "üè† Main Menu",
        'select_action': "Select an action:",
        'start_transfer': "üöÄ Start Transfer",
        'how_to_get_tokens': "üîë How to Get Tokens",
        'how_to_get_db_ids': "üìù How to Get DB IDs",
        'faq': "‚ùì FAQ",
        'about': "‚ÑπÔ∏è About",
        'help': "üÜò Help",
        'cancel': "‚ùå Cancel",
        'back': "‚¨ÖÔ∏è Back",
        'origin_token_prompt': (
            "üîë Send the source Notion account token\n\n"
            "How to get the token:\n"
            "1. Go to https://www.notion.so/my-integrations\n"
            "2. Click 'New integration'\n"
            "3. Fill the form and get the token"
        ),
        'dest_token_prompt': "üîë Now send the target account token",
        'origin_db_prompt': (
            "üìÅ Send the source database ID\n\n"
            "You can find the ID in its URL:\n"
            "notion.so/workspace/[DATABASE-ID]?v=..."
        ),
        'dest_db_prompt': "üìÅ Send the target database ID",
        'faq_text': (
            "*Frequently Asked Questions:*\n\n"
            "*Q: How to get a Notion token?*\n"
            "A: Go to [Notion Integrations](https://www.notion.so/my-integrations), "
            "create a new integration and copy the token.\n\n"
            "*Q: Where to find database ID?*\n"
            "A: Open the database in browser and copy ID from URL:\n"
            "`notion.so/workspace/{DATABASE-ID}?v=...`\n\n"
            "*Q: What data is transferred?*\n"
            "A: All database records with preserved structure and properties.\n\n"
            "*Q: Can I cancel the transfer?*\n"
            "A: Yes, use /cancel command at any time."
        ),
        'about_text': (
            "*About:*\n\n"
            "Notion Transfer Bot helps transfer data between Notion databases. "
            "The bot uses official Notion API and supports:\n\n"
            "‚úÖ All records transfer\n"
            "‚úÖ Structure preservation\n"
            "‚úÖ Progress tracking\n"
            "‚úÖ Error recovery\n\n"
            "Version: 1.0.0\n"
            "Developer: @your_username"
        ),
        'help_text': (
            "*Help:*\n\n"
            "üîπ */start* - Start working\n"
            "üîπ */cancel* - Cancel current operation\n"
            "üîπ */help* - Show this message\n\n"
            "If you encounter problems:\n"
            "1. Check if tokens are correct\n"
            "2. Make sure database IDs are valid\n"
            "3. Verify integration permissions\n\n"
            "Need help? Contact @your_username"
        )
    }
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = None

class NotionTransfer:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, origin_token: str, dest_token: str, origin_db: str, dest_db: str):
        self.origin_api = NotionAPI(origin_token)
        self.dest_api = NotionAPI(dest_token)
        self.origin_db = origin_db
        self.dest_db = dest_db
        self.progress_file = BASE_DIR / f"transfer_progress_{origin_db}.json"
        self.progress = TransferProgress()
        
    def load_saved_progress(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        saved_data = load_progress(self.progress_file)
        if saved_data:
            self.progress = TransferProgress(**saved_data)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {self.progress.progress_percentage:.1f}%")
    
    async def transfer_page(self, page: NotionPage) -> Optional[str]:
        """–ü–µ—Ä–µ–Ω–æ—Å –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            page_data = {
                "parent": {"database_id": self.dest_db},
                "properties": page.properties
            }
            
            response = await self.dest_api.create_page(page_data)
            return response["id"]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page.id}: {str(e)}")
            return None
    
    async def run(self, update: Update) -> None:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞"""
        try:
            self.load_saved_progress()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            response = await self.origin_api.query_database(
                self.origin_db,
                start_cursor=self.progress.current_cursor
            )
            
            if not response.get("results"):
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
            self.progress.total_pages = len(response["results"])
            await update.message.reply_text(f"üìä –ù–∞–π–¥–µ–Ω–æ {self.progress.total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞")
            
            # –ü–µ—Ä–µ–Ω–æ—Å –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for i, result in enumerate(response["results"], 1):
                page = NotionPage(
                    id=result["id"],
                    properties=result["properties"],
                    children=result.get("children", [])
                )
                
                if page.id in self.progress.transferred_pages:
                    continue
                
                if new_page_id := await self.transfer_page(page):
                    self.progress.add_transferred_page(page.id)
                    if i % 5 == 0:  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü
                        await update.message.reply_text(
                            f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å: {self.progress.progress_percentage:.1f}% "
                            f"({i}/{self.progress.total_pages})"
                        )
                else:
                    self.progress.add_failed_page(page.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                save_progress(self.progress_file, self.progress.dict())
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if self.progress.failed_pages:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏\n"
                    f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {len(self.progress.transferred_pages)} —Å—Ç—Ä–∞–Ω–∏—Ü\n"
                    f"–û—à–∏–±–æ–∫: {len(self.progress.failed_pages)} —Å—Ç—Ä–∞–Ω–∏—Ü"
                )
            else:
                await update.message.reply_text("‚úÖ –ü–µ—Ä–µ–Ω–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def get_language_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    keyboard = [
        [
            InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_main_menu_keyboard(lang: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    texts = TEXTS[lang]
    keyboard = [
        [InlineKeyboardButton(texts['start_transfer'], callback_data="transfer")],
        [
            InlineKeyboardButton(texts['how_to_get_tokens'], callback_data="tokens_help"),
            InlineKeyboardButton(texts['how_to_get_db_ids'], callback_data="db_help")
        ],
        [
            InlineKeyboardButton(texts['faq'], callback_data="faq"),
            InlineKeyboardButton(texts['about'], callback_data="about")
        ],
        [InlineKeyboardButton(texts['help'], callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –í–µ–±-—Ö–µ–Ω–¥–ª–µ—Ä—ã
async def health_check(request):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return web.Response(text="OK", status=200)

async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram"""
    if app:
        update = Update.de_json(await request.json(), app.bot)
        await app.process_update(update)
    return web.Response(status=200)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        TEXTS['ru']['welcome'],  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ä—É—Å—Å–∫–æ–≥–æ
        reply_markup=get_language_keyboard()
    )
    return LANGUAGE_SELECT

async def language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    lang = query.data.split('_')[1]
    context.user_data['language'] = lang
    
    await query.edit_message_text(
        text=TEXTS[lang]['select_action'],
        reply_markup=get_main_menu_keyboard(lang)
    )
    return MAIN_MENU

async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    lang = context.user_data.get('language', 'ru')
    texts = TEXTS[lang]
    
    action = query.data
    if action == "transfer":
        await query.edit_message_text(texts['origin_token_prompt'])
        return ORIGIN_TOKEN
    elif action in ["tokens_help", "db_help", "faq", "about", "help"]:
        text = texts[f'{action}_text']
        keyboard = [[InlineKeyboardButton(texts['back'], callback_data="back_to_menu")]]
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        return MAIN_MENU
    elif action == "back_to_menu":
        await query.edit_message_text(
            text=texts['select_action'],
            reply_markup=get_main_menu_keyboard(lang)
        )
        return MAIN_MENU
    
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user = update.message.from_user
    lang = context.user_data.get('language', 'ru')
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é")
    
    await update.message.reply_text(
        TEXTS[lang]['cancel'],
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def get_origin_token(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    lang = context.user_data.get('language', 'ru')
    user_data[update.effective_user.id] = {"origin_token": update.message.text}
    
    await update.message.reply_text(TEXTS[lang]['dest_token_prompt'])
    return DEST_TOKEN

async def get_dest_token(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    lang = context.user_data.get('language', 'ru')
    user_data[update.effective_user.id]["dest_token"] = update.message.text
    
    await update.message.reply_text(TEXTS[lang]['origin_db_prompt'])
    return ORIGIN_DB

async def get_origin_db(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    lang = context.user_data.get('language', 'ru')
    user_data[update.effective_user.id]["origin_db"] = update.message.text
    
    await update.message.reply_text(TEXTS[lang]['dest_db_prompt'])
    return DEST_DB

async def get_dest_db(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ü–µ–ª–µ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    user_data[user_id]["dest_db"] = update.message.text
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞
    transfer = NotionTransfer(
        origin_token=user_data[user_id]["origin_token"],
        dest_token=user_data[user_id]["dest_token"],
        origin_db=user_data[user_id]["origin_db"],
        dest_db=user_data[user_id]["dest_db"]
    )
    
    await update.message.reply_text("üöÄ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞...")
    await transfer.run(update)
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_data[user_id]
    
    return ConversationHandler.END

async def setup_webhook(app: Application, webhook_url: str):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞"""
    await app.bot.set_webhook(webhook_url)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")

async def run_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    web_app = web.Application()
    web_app.router.add_get("/health", health_check)
    web_app.router.add_post("/webhook", webhook_handler)
    
    runner = web.AppRunner(web_app)
    await runner.setup()
    
    port = int(os.environ.get("PORT", "10000"))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global app
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN", "7343545514:AAFUY4a9arc5dR2wHQU5uma3AC58HJ03vJM")
    if not bot_token:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (TELEGRAM_BOT_TOKEN)")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    app = Application.builder().token(bot_token).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANGUAGE_SELECT: [CallbackQueryHandler(language_callback, pattern=r"^lang_")],
            MAIN_MENU: [CallbackQueryHandler(menu_callback)],
            ORIGIN_TOKEN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_origin_token)],
            DEST_TOKEN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_dest_token)],
            ORIGIN_DB: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_origin_db)],
            DEST_DB: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_dest_db)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    app.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    webhook_url = os.getenv("WEBHOOK_URL")
    if webhook_url:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        loop.run_until_complete(app.initialize())
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        loop.run_until_complete(setup_webhook(app, webhook_url))
        loop.run_until_complete(run_web_server())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        loop.run_until_complete(app.start())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop.run_forever()
    else:
        # Fallback –Ω–∞ polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        app.run_polling()

if __name__ == "__main__":
    main() 
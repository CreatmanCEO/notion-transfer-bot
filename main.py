import sys
import os
from pathlib import Path
from typing import Optional, Dict
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, ConversationHandler, filters
from aiohttp import web
import asyncio

from config.settings import BASE_DIR
from notion.api import NotionAPI
from notion.models import NotionPage, TransferProgress
from utils.logger import setup_logger
from utils.helpers import save_progress, load_progress

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = setup_logger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
ORIGIN_TOKEN, DEST_TOKEN, ORIGIN_DB, DEST_DB, CONFIRMATION = range(5)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data: Dict[int, dict] = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = None

class NotionTransfer:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, origin_token: str, dest_token: str, origin_db: str, dest_db: str):
        self.origin_api = NotionAPI(origin_token)
        self.dest_api = NotionAPI(dest_token)
        self.origin_db = origin_db
        self.dest_db = dest_db
        self.progress_file = BASE_DIR / f"transfer_progress_{origin_db}.json"
        self.progress = TransferProgress()
        
    def load_saved_progress(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        saved_data = load_progress(self.progress_file)
        if saved_data:
            self.progress = TransferProgress(**saved_data)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {self.progress.progress_percentage:.1f}%")
    
    async def transfer_page(self, page: NotionPage) -> Optional[str]:
        """–ü–µ—Ä–µ–Ω–æ—Å –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            page_data = {
                "parent": {"database_id": self.dest_db},
                "properties": page.properties
            }
            
            response = await self.dest_api.create_page(page_data)
            return response["id"]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page.id}: {str(e)}")
            return None
    
    async def run(self, update: Update) -> None:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞"""
        try:
            self.load_saved_progress()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            response = await self.origin_api.query_database(
                self.origin_db,
                start_cursor=self.progress.current_cursor
            )
            
            if not response.get("results"):
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
            self.progress.total_pages = len(response["results"])
            await update.message.reply_text(f"üìä –ù–∞–π–¥–µ–Ω–æ {self.progress.total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞")
            
            # –ü–µ—Ä–µ–Ω–æ—Å –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for i, result in enumerate(response["results"], 1):
                page = NotionPage(
                    id=result["id"],
                    properties=result["properties"],
                    children=result.get("children", [])
                )
                
                if page.id in self.progress.transferred_pages:
                    continue
                
                if new_page_id := await self.transfer_page(page):
                    self.progress.add_transferred_page(page.id)
                    if i % 5 == 0:  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü
                        await update.message.reply_text(
                            f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å: {self.progress.progress_percentage:.1f}% "
                            f"({i}/{self.progress.total_pages})"
                        )
                else:
                    self.progress.add_failed_page(page.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                save_progress(self.progress_file, self.progress.dict())
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if self.progress.failed_pages:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏\n"
                    f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {len(self.progress.transferred_pages)} —Å—Ç—Ä–∞–Ω–∏—Ü\n"
                    f"–û—à–∏–±–æ–∫: {len(self.progress.failed_pages)} —Å—Ç—Ä–∞–Ω–∏—Ü"
                )
            else:
                await update.message.reply_text("‚úÖ –ü–µ—Ä–µ–Ω–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –í–µ–±-—Ö–µ–Ω–¥–ª–µ—Ä—ã
async def health_check(request):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return web.Response(text="OK", status=200)

async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram"""
    if app:
        update = Update.de_json(await request.json(), app.bot)
        await app.process_update(update)
    return web.Response(status=200)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞"""
    reply_keyboard = [["–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å", "–û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –±–∞–∑–∞–º–∏ Notion.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ /cancel",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return ORIGIN_TOKEN

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é")
    await update.message.reply_text(
        "üëã –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def get_origin_token(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    if update.message.text == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    
    await update.message.reply_text(
        "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Notion (ORIGIN_NOTION_TOKEN)"
    )
    return DEST_TOKEN

async def get_dest_token(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user_data[update.effective_user.id] = {"origin_token": update.message.text}
    
    await update.message.reply_text(
        "üîë –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Ü–µ–ª–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Notion (DEST_NOTION_TOKEN)"
    )
    return ORIGIN_DB

async def get_origin_db(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user_data[update.effective_user.id]["dest_token"] = update.message.text
    
    await update.message.reply_text(
        "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (ORIGIN_DATABASE_ID)"
    )
    return DEST_DB

async def get_dest_db(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ü–µ–ª–µ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user_data[update.effective_user.id]["origin_db"] = update.message.text
    
    await update.message.reply_text(
        "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Ü–µ–ª–µ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (DEST_DATABASE_ID)"
    )
    return CONFIRMATION

async def confirm_transfer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ–Ω–æ—Å–∞"""
    user_id = update.effective_user.id
    user_data[user_id]["dest_db"] = update.message.text
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞
    transfer = NotionTransfer(
        origin_token=user_data[user_id]["origin_token"],
        dest_token=user_data[user_id]["dest_token"],
        origin_db=user_data[user_id]["origin_db"],
        dest_db=user_data[user_id]["dest_db"]
    )
    
    await update.message.reply_text("üöÄ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞...")
    await transfer.run(update)
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_data[user_id]
    
    return ConversationHandler.END

async def setup_webhook(app: Application, webhook_url: str):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞"""
    await app.bot.set_webhook(webhook_url)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")

async def run_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    web_app = web.Application()
    web_app.router.add_get("/health", health_check)
    web_app.router.add_post("/webhook", webhook_handler)
    
    runner = web.AppRunner(web_app)
    await runner.setup()
    
    port = int(os.environ.get("PORT", "8080"))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global app
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN", "7343545514:AAFUY4a9arc5dR2wHQU5uma3AC58HJ03vJM")
    if not bot_token:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (TELEGRAM_BOT_TOKEN)")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    app = Application.builder().token(bot_token).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ORIGIN_TOKEN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_origin_token)],
            DEST_TOKEN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_dest_token)],
            ORIGIN_DB: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_origin_db)],
            DEST_DB: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_dest_db)],
            CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_transfer)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    app.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    webhook_url = os.getenv("WEBHOOK_URL")
    if webhook_url:
        asyncio.get_event_loop().run_until_complete(setup_webhook(app, webhook_url))
        asyncio.get_event_loop().run_until_complete(run_web_server())
        asyncio.get_event_loop().run_forever()
    else:
        # Fallback –Ω–∞ polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        app.run_polling()

if __name__ == "__main__":
    main() 